/// \file
/// \addtogroup Scene
/// @{
///
// AUTOGENERATED FILE - DO NOT MODIFY!
// This file was generated by Djinni from scene.djinni

#pragma once

#include <bnb/utils/defs.hpp>
#include <memory>
#include <string>
#include <vector>

namespace bnb { namespace interfaces {

class component;
class layer;
enum class component_type;

/**
 * A structure element of the scene.
 *
 * To construct a scene, you should form a hierarchy of entities to create its
 * structure, then add different components such as lights, cameras, and
 * geometry to entities to create visible content.
 *
 * Each entity has a name which could be used for finding the entity in a hierarchy.
 *
 * Entities in the scene form a tree hierarchy between parents and children.
 *
 * Each entity could be in an enabled or disabled state. The disabling of the entity
 * is equivalent to removing the entity and all its children from the hierarchy.
 *
 * An entity is a container for components. Each entity could contain several components,
 * but only one component of each component type. The Transform component is mandatory
 * and it implicitly placed in each entity.
 *
 */
class BNB_EXPORT entity {
public:
    virtual ~entity() {}

    /**
     * Set a new name to the entity. Name could be empty.
     *@param name (string): new entity name.
     */
    virtual void set_name(const std::string & name) = 0;

    /**@return entity name (string) */
    virtual std::string get_name() const = 0;

    /**
     *add entiy as child to hierarchy
     *@param child (entity): child entity.
     */
    virtual void add_child(const std::shared_ptr<entity> & child) = 0;

    /**
     *remove entiy as child to hierarchy
     *@param child (entity): child entity.
     */
    virtual void remove_child(const std::shared_ptr<entity> & child) = 0;

    /**get all child entites list. */
    virtual std::vector<std::shared_ptr<entity>> get_children() const = 0;

    /**remove all child entites list. */
    virtual void clear_children() = 0;

    /**
     * Perform depth-first traverse of entity tree.
     * Return first found child with name `entity_name` or NULL if such an entity doesn't exist.
     *@param entity_name (string): name of desired entity
     *@return found entity (entity) or null
     */
    virtual std::shared_ptr<entity> find_child_by_name(const std::string & entity_name) = 0;

    /**@return parent entity and null if given entity is root. */
    virtual std::shared_ptr<entity> get_parent() const = 0;

    /**
     *Set enable/disable entity flag. The disabling of the entity is equivalent to removing the entity and all its children from the hierarchy.
     *@param active (bool) activity flag.
     */
    virtual void set_active(bool active) = 0;

    /**@return activity flag (bool) */
    virtual bool is_active() const = 0;

    /**
     *Add entity for given layer if it is wasn't added before.
     *@param layer (layer): layer to add.
     */
    virtual void add_into_layer(const std::shared_ptr<layer> & layer) = 0;

    /**
     *Removes entity from given layer if it is was added before.
     *@params layer (layer): layer from remove.
     */
    virtual void remove_from_layer(const std::shared_ptr<layer> & layer) = 0;

    /**returns list of layers in which entity was added. */
    virtual std::vector<std::shared_ptr<layer>> get_layers() const = 0;

    /**
     *add given component to entity if component of given type wasn't added before.
     *@param component (component): component to add.
     */
    virtual void add_component(const std::shared_ptr<component> & component) = 0;

    /**
     *check if component of given type was added.
     *@param component_type (component_type): component type to check.
     *@return flag (bool)
     */
    virtual bool has_component(component_type type) = 0;

    /**
     *get component of given type.
     *@param component_type (component_type): component type to get.
     *@return component of given type (component)
     */
    virtual std::shared_ptr<component> get_component(component_type type) = 0;

    /**
     *remove given component to entity if component of given component was added before.
     *@param component (component): component to remove.
     */
    virtual void remove_component(const std::shared_ptr<component> & component) = 0;
};

} }  // namespace bnb::interfaces
/// @}

