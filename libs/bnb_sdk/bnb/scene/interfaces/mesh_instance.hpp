/// \file
/// \addtogroup Scene
/// @{
///
// AUTOGENERATED FILE - DO NOT MODIFY!
// This file was generated by Djinni from scene.djinni

#pragma once

#include <bnb/utils/defs.hpp>
#include <cstdint>
#include <memory>
#include <string>
#include <vector>

namespace bnb { namespace interfaces {

class component;
class material;
class mesh;
class physics_simulator;
enum class animation_mode;

/**class which is the container for meshes and materials and provide interface for animation controlling. Subclass of component */
class BNB_EXPORT mesh_instance {
public:
    virtual ~mesh_instance() {}

    /**
     *Fabric method for mesh_instance creating.
     *@return mesh_instance component (mesh_instance)
     */
    static std::shared_ptr<mesh_instance> create();

    /**
     *set mesh visibility flag. Will be overridden if entity with mesh_instance component is child of entity with face_tracker component.
     *@param visible(bool) visibility flag.
     */
    virtual void set_visible(bool visible) = 0;

    /**@return visibility flag (bool) */
    virtual bool is_visible() const = 0;

    /**
     *set for mesh sub geometry with specified name specified material if sub geometry with given name exists.
     *@param sub_geometry_name (string) sub geometry name.
     *@param material (material) sub geometry material.
     */
    virtual void set_sub_geometry_material(const std::string & sub_geometry_name, const std::shared_ptr<material> & material) = 0;

    /**
     *returns material from mesh sub geometry with specified name if it exist, null otherwise
     *@param sub_geometry_name (string) sub geometry name.
     *@return sub geometry material (material).
     */
    virtual std::shared_ptr<material> get_sub_geometry_material(const std::string & sub_geometry_name) = 0;

    /**
     *get materials for each sub geometry
     *@return materials (list<material>)
     */
    virtual std::vector<std::shared_ptr<material>> get_materials() = 0;

    /**
     *set mesh for given mesh instance. Of some mesh was settled before need to re set all materials.
     *@param mesh (mesh) new mesh.
     */
    virtual void set_mesh(const std::shared_ptr<mesh> & mesh) = 0;

    /**@return mesh (mesh). */
    virtual std::shared_ptr<mesh> get_mesh() = 0;

    /**
     *Change current animation if animation with specified name exist.
     *@param name (string) new animation.
     *@param mode (animation_mode).
     */
    virtual void animation_change(const std::string & animation, animation_mode mode) = 0;

    /**Start animation playback. */
    virtual void animation_play() = 0;

    /**pause animation playback. */
    virtual void animation_pause() = 0;

    /**
     *Set current animation playback position.
     *@param position_ns (long): position in ns.
     */
    virtual void animation_seek(int64_t position_ns) = 0;

    /**
     *True if animation playback was started.
     *@return animation playback active flag (bool).
     */
    virtual bool is_animation_playing() const = 0;

    /**
     *True if animation playback stop.
     *@return animation playback active flag (bool).
     */
    virtual bool is_animation_ended() const = 0;

    /**@return current setted animation name (string). */
    virtual std::string get_animation() const = 0;

    /**@return current setted animation mode (animation_mode). Can be off loop once once_reversed fixed. */
    virtual animation_mode get_animation_mode() const = 0;

    /**@return current animation playback position (long). */
    virtual int64_t get_animation_position_ns() const = 0;

    /**@return current animation playback duration (long). */
    virtual int64_t get_animation_duration_ns() const = 0;

    /**
     *Returns current animation playback time offset from begin(0). Typycally equals animation position mod animation duration.
     *@return animation playback time offset (long).
     */
    virtual int64_t get_animation_time_offset_ns() const = 0;

    /**
     *Set current animation playback time offset from begin(0). duration.
     *@param time_ns (long): animation playback time offset.
     */
    virtual void set_animation_time_offset_ns(int64_t time_ns) = 0;

    /**@return physics_simulator of current mesh_instance  */
    virtual std::shared_ptr<physics_simulator> get_physics_simulator() const = 0;

    /**@return upcast to base type */
    virtual std::shared_ptr<component> as_component() = 0;
};

} }  // namespace bnb::interfaces
/// @}

