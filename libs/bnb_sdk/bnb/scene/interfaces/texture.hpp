/// \file
/// \addtogroup Scene
/// @{
///
// AUTOGENERATED FILE - DO NOT MODIFY!
// This file was generated by Djinni from scene.djinni

#pragma once

#include <bnb/utils/defs.hpp>
#include <cstdint>
#include <memory>
#include <string>

namespace bnb { namespace interfaces {

class image;
class resource;
enum class texture_filtering_mode;

/**Class, which repesent 2D texture interface. Subclass of image */
class BNB_EXPORT texture {
public:
    virtual ~texture() {}

    virtual void load_resource(const std::shared_ptr<resource> & res) = 0;

    /**
     *Load texture data from specified file descriptor.
     *@param fd (i32): file descriptor, should be closed on the caller side.
     */
    virtual void load_by_fd(int32_t fd) = 0;

    /**
     *Load texture data from specified file name. For now only supported .png, .jpeg, .jpg, .ktx (2d) images.
     *@param file_name (string): absolute path for image file
     */
    virtual void load(const std::string & file_name) = 0;

    /**@return width (int) of loaded image */
    virtual int32_t get_width() const = 0;

    /**@return height (int) of loaded image */
    virtual int32_t get_height() const = 0;

    /**@return channels count of loaded image (R, RG, RGBA, i.e. 1, 2, or 4). */
    virtual int32_t get_layers() const = 0;

    /**
     *set mimpap generation flag. (affect only on ogl backend).
     *@param enable (bool): mipmap generation enable flag.
     */
    virtual void set_mips(bool enable) = 0;

    /**@return flag (bool) : mimpap generation flag  */
    virtual bool has_mips() const = 0;

    /**
     *enable/disable texture tiling
     *@param enable (bool): tiled wrapping flag
     */
    virtual void set_tiling(bool enable) = 0;

    /**@return tiled texture wrapping flag (bool). */
    virtual bool get_tiling() const = 0;

    /**
     *set texture filtering mode
     *param mode (texture_filtering_mode)
     */
    virtual void set_filtering(texture_filtering_mode type) = 0;

    /**@return filtering mode (texture_filtering_mode) */
    virtual texture_filtering_mode get_filtering_mode() const = 0;

    /**@return upcast to base type */
    virtual std::shared_ptr<image> as_image() = 0;
};

} }  // namespace bnb::interfaces
/// @}

