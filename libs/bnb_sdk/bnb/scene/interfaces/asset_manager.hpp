/// \file
/// \addtogroup Scene
/// @{
///
// AUTOGENERATED FILE - DO NOT MODIFY!
// This file was generated by Djinni from scene.djinni

#pragma once

#include <bnb/utils/defs.hpp>
#include <memory>
#include <string>

namespace bnb { namespace interfaces {

class audio_track;
class face;
class hand;
class image;
class material;
class mesh;
class morphing;
class render_target;
class resource;
enum class image_type;
enum class morphing_type;
enum class procedural_algorithm_type;
enum class segmentation_mask_type;

/**Factory for assets creating and their data uploading. */
class BNB_EXPORT asset_manager {
public:
    virtual ~asset_manager() {}

    /**
     *create image of given type
     *@param name (string): image name
     *@param type (image_type): image type
     *@return created image (image).
     */
    virtual std::shared_ptr<image> create_image(const std::string & name, image_type type) = 0;

    /**
     *create resource and start async loading in the asset_manager threadpool
     *@param name (resource): resource filename
     *@return created resource (resource).
     */
    virtual std::shared_ptr<resource> create_resource(const std::string & filename) = 0;

    virtual std::shared_ptr<image> create_segmentation_mask(const std::string & name, segmentation_mask_type type) = 0;

    virtual std::shared_ptr<image> create_procedural_texture(const std::string & name, procedural_algorithm_type type) = 0;

    /**
     *creates render target
     *@param name (string): render target name
     *@return created render target (render_target).
     */
    virtual std::shared_ptr<render_target> create_render_target(const std::string & name) = 0;

    /**
     *creates audio_track
     *@param name (string): audio track name
     *@return created audio track (audio_track).
     */
    virtual std::shared_ptr<audio_track> create_audio_track(const std::string & name) = 0;

    /**
     *creates face
     *@param name (string): face name
     *@return created face (face).
     */
    virtual std::shared_ptr<face> create_face(const std::string & name) = 0;

    /**
     *creates morphing
     *@param name (string): morphing name
     *@return created morphing (morphing).
     */
    virtual std::shared_ptr<morphing> create_morph(const std::string & name, morphing_type type) = 0;

    /**
     *creates static mesh
     *@param name (string): mesh name
     *@return created mesh (mesh).
     */
    virtual std::shared_ptr<mesh> create_static_mesh(const std::string & name) = 0;

    /**
     *creates dynamicaly updated mesh
     *@param name (string): mesh name
     *@param path (string): path to mesh
     *@return created mesh (mesh).
     */
    virtual std::shared_ptr<mesh> create_dynamic_mesh(const std::string & name, const std::string & path) = 0;

    /**
     *creates hand
     *@param name (string): hand name
     *@return created hand (hand).
     */
    virtual std::shared_ptr<hand> create_hand(const std::string & name) = 0;

    /**
     *upload mesh file
     *@param mesh (mesh): mesh
     *@param file_name (string): file to upload
     */
    virtual void upload_mesh_data(const std::shared_ptr<mesh> & mesh, const std::string & file_name) = 0;

    /**
     *creates material
     *@param name (string): material name
     *@return created material (material).
     */
    virtual std::shared_ptr<material> create_material(const std::string & name, const std::string & path) = 0;

    /**
     *Find image by specified name. Returns null if image not found.
     *@param name (string) image name.
     */
    virtual std::shared_ptr<image> find_image(const std::string & name) const = 0;

    /**
     *Find render target by specified name. Returns null if render target not found.
     *@param name (string) render target name.
     */
    virtual std::shared_ptr<render_target> find_render_target(const std::string & name) const = 0;

    /**
     *Find audio track by specified name. Returns null if audio track not found.
     *@param name (string) audio track name.
     */
    virtual std::shared_ptr<audio_track> find_audio_track(const std::string & name) const = 0;

    /**
     *Find face by specified name. Returns null if face not found.
     *@param name (string) face name.
     */
    virtual std::shared_ptr<face> find_face(const std::string & name) const = 0;

    /**
     *Find hand by specified name. Returns null if hand not found.
     *@param name (string) hand name.
     */
    virtual std::shared_ptr<hand> find_hand(const std::string & name) const = 0;

    /**
     *Find morph by specified name. Returns null if morph not found.
     *@param name (string) morph name.
     */
    virtual std::shared_ptr<morphing> find_morph(const std::string & name) const = 0;

    /**
     *Find mesh by specified name. Returns null if mesh not found.
     *@param name (string) mesh name.
     */
    virtual std::shared_ptr<mesh> find_mesh(const std::string & name) const = 0;

    /**
     *Find material by specified name. Returns null if material not found.
     *@param name (string) material name.
     */
    virtual std::shared_ptr<material> find_material(const std::string & name) const = 0;
};

} }  // namespace bnb::interfaces
/// @}

