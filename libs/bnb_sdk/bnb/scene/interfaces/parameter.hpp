/// \file
/// \addtogroup Scene
/// @{
///
// AUTOGENERATED FILE - DO NOT MODIFY!
// This file was generated by Djinni from scene.djinni

#pragma once

#include <bnb/utils/defs.hpp>
#include <cstdint>
#include <memory>
#include <string>

namespace bnb { namespace interfaces {

struct mat2x4;
struct mat3x4;
struct mat4x4;
struct vec3;
struct vec4;

/**Class, represent shader parameter. */
class BNB_EXPORT parameter {
public:
    virtual ~parameter() {}

    /**
     *Fabric method for parameter creating.
     *@param name (string): parameter name.
     *@return created parameter (parameter)
     */
    static std::shared_ptr<parameter> create(const std::string & name);

    /**@return parameter name (string) */
    virtual std::string get_name() const = 0;

    /**
     *set parameter integer value.
     *@param value (int)
     */
    virtual void set_integer(int32_t value) = 0;

    /**return parameter int value. Throw is type is not equal type, which was added earlier. */
    virtual int32_t get_integer() const = 0;

    /**
     *set parameter real value.
     *@param value (float)
     */
    virtual void set_real(float value) = 0;

    /**return parameter f32 value. Throw is type is not equal type, which was added earlier. */
    virtual float get_real() const = 0;

    /**
     *set parameter string value.
     *@param value (string)
     */
    virtual void set_string(const std::string & value) = 0;

    /**return parameter string value. Throw is type is not equal type, which was added earlier. */
    virtual std::string get_string() const = 0;

    /**
     *set parameter vec3 value.
     *@param value (vec3)
     */
    virtual void set_vector3(const vec3 & value) = 0;

    /**return parameter vec3 value. Throw is type is not equal type, which was added earlier. */
    virtual vec3 get_vector3() const = 0;

    /**
     *set parameter vec4 value.
     *@param value (vec4)
     */
    virtual void set_vector4(const vec4 & value) = 0;

    /**return parameter vec4 value. Throw is type is not equal type, which was added earlier. */
    virtual vec4 get_vector4() const = 0;

    /**
     *set parameter mat2x4 value.
     *@param value (mat2x4)
     */
    virtual void set_mat2x4(const mat2x4 & value) = 0;

    /**return parameter mat2x4 value. Throw is type is not equal type, which was added earlier. */
    virtual mat2x4 get_mat2x4() const = 0;

    /**
     *set parameter mat3x4 value.
     *@param value (mat3x4)
     */
    virtual void set_mat3x4(const mat3x4 & value) = 0;

    /**return parameter mat3x4 value. Throw is type is not equal type, which was added earlier. */
    virtual mat3x4 get_mat3x4() const = 0;

    /**
     *set parameter mat4x4 value.
     *@param value (mat4x4)
     */
    virtual void set_mat4x4(const mat4x4 & value) = 0;

    /**return parameter mat4x4 value. Throw is type is not equal type, which was added earlier. */
    virtual mat4x4 get_mat4x4() const = 0;
};

} }  // namespace bnb::interfaces
/// @}

