/// \file
/// \addtogroup Scene
/// @{
///
// AUTOGENERATED FILE - DO NOT MODIFY!
// This file was generated by Djinni from scene.djinni

#pragma once

#include <bnb/utils/defs.hpp>
#include <cstdint>
#include <memory>

namespace bnb { namespace interfaces {

class image;
enum class attachment_type;
enum class pixel_format_type;
enum class texture_filtering_mode;
struct attachment_info;
struct vec4;

/**Class, represents render target attachment. Subclass of image */
class BNB_EXPORT attachment {
public:
    virtual ~attachment() {}

    /**@return attachment type (attachment_type). Can be color, or depth */
    virtual attachment_type get_attachment_type() const = 0;

    /**@param type (attachment_type). Can be color, or depth */
    virtual void set_type(attachment_type type) = 0;

    /**@param color (vec4). Also implisity set attachment load behaviour to clear. */
    virtual void set_clear_color(const vec4 & color) = 0;

    /**@return attachment clear color (vec4) */
    virtual vec4 get_clear_color() const = 0;

    /**
     *set attachment width
     *@param width (int)
     */
    virtual void set_width(int32_t value) = 0;

    /**
     *set attachment height
     *@param height (int)
     */
    virtual void set_height(int32_t value) = 0;

    /**@return attachment width (int) */
    virtual int32_t get_width() const = 0;

    /**@return attachment height (int) */
    virtual int32_t get_height() const = 0;

    virtual void set_info(const attachment_info & info) = 0;

    virtual attachment_info get_info() const = 0;

    /**set attachment pixel format */
    virtual void set_format(pixel_format_type format) = 0;

    /**@return attachment pixel format */
    virtual pixel_format_type get_format() const = 0;

    /**
     *set attachment texture filtering mode
     *param mode (texture_filtering_mode)
     */
    virtual void set_filtering_mode(texture_filtering_mode value) = 0;

    /**@return filtering mode (texture_filtering_mode) */
    virtual texture_filtering_mode get_filtering_mode() const = 0;

    /**@return upcast to base type */
    virtual std::shared_ptr<image> as_image() = 0;
};

} }  // namespace bnb::interfaces
/// @}

