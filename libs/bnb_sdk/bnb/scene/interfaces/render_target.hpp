/// \file
/// \addtogroup Scene
/// @{
///
// AUTOGENERATED FILE - DO NOT MODIFY!
// This file was generated by Djinni from scene.djinni

#pragma once

#include <bnb/utils/defs.hpp>
#include <cstdint>
#include <memory>
#include <string>
#include <vector>

namespace bnb { namespace interfaces {

class image;

/** Class, represents render_target (render pass) interface */
class BNB_EXPORT render_target {
public:
    virtual ~render_target() {}

    /**@return render target name (string) */
    virtual std::string get_name() const = 0;

    /**@param samples (int) msaa samples counts */
    virtual void set_samples_count(int32_t samples) = 0;

    /**@return msaa samples counts */
    virtual int32_t get_samples_count() const = 0;

    /**
     *set render target surface extent
     *@param width (int): surface width
     *@param height (int): surface height
     */
    virtual void set_extent(int32_t width, int32_t height) = 0;

    /**@return render target width (int) */
    virtual int32_t get_width() const = 0;

    /**@return render target height (int) */
    virtual int32_t get_height() const = 0;

    /**
     *set render target surface extent scale
     *@param width (int): surface width scale
     *@param height (int): surface height scale
     */
    virtual void set_scale(float scale) = 0;

    /**@return render target width scale (int) */
    virtual float get_scale() const = 0;

    /**
     *add color or depth attachment to render target
     *@param attachment (image): surface attachment
     */
    virtual void add_attachment(const std::shared_ptr<image> & attachment) = 0;

    /**
     *removes color or depth attachment from render target, if it was aded early
     *@param attachment (image): surface attachment
     */
    virtual void remove_attachment(const std::shared_ptr<image> & attachment) = 0;

    /**@returns list of added attachments (list<image>). */
    virtual std::vector<std::shared_ptr<image>> get_attachments() const = 0;
};

} }  // namespace bnb::interfaces
/// @}

