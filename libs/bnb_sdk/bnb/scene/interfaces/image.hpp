/// \file
/// \addtogroup Scene
/// @{
///
// AUTOGENERATED FILE - DO NOT MODIFY!
// This file was generated by Djinni from scene.djinni

#pragma once

#include <bnb/utils/defs.hpp>
#include <memory>
#include <string>

namespace bnb { namespace interfaces {

class attachment;
class camera_texture;
class cubemap;
class procedural_texture;
class segmentation_mask;
class text_texture;
class texture;
class video;
class weighted_lut;
enum class image_type;

/**Base class, which represented basic image interface */
class BNB_EXPORT image {
public:
    virtual ~image() {}

    /**@return image name (string) */
    virtual std::string get_name() const = 0;

    /**@return image type. type of image subclass (enum, can be attachment, cubemap, segmentation_mask, texture, camera_texture, video, weighted_lut) */
    virtual image_type get_type() const = 0;

    /**cast to attachment subclass. May throw. */
    virtual std::shared_ptr<attachment> as_attachment() = 0;

    /**cast to cubemap subclass. May throw. */
    virtual std::shared_ptr<cubemap> as_cubemap() = 0;

    /**cast to segmentation_mask subclass. May throw. */
    virtual std::shared_ptr<segmentation_mask> as_segmentation_mask() = 0;

    /**cast to texture subclass. May throw. */
    virtual std::shared_ptr<texture> as_texture() = 0;

    /**cast to camera_texture subclass. May throw. */
    virtual std::shared_ptr<camera_texture> as_camera_texture() = 0;

    /**cast to video subclass. May throw. */
    virtual std::shared_ptr<video> as_video() = 0;

    /**cast to weighted_lut subclass. May throw. */
    virtual std::shared_ptr<weighted_lut> as_weighted_lut() = 0;

    /**cast to text_texture subclass. May throw. */
    virtual std::shared_ptr<text_texture> as_text_texture() = 0;

    virtual std::shared_ptr<procedural_texture> as_procedural_texture() = 0;
};

} }  // namespace bnb::interfaces
/// @}

