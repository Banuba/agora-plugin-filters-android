/// \file
/// \addtogroup Scene
/// @{
///
// AUTOGENERATED FILE - DO NOT MODIFY!
// This file was generated by Djinni from scene.djinni

#pragma once

#include <bnb/utils/defs.hpp>
#include <memory>
#include <string>

namespace bnb { namespace interfaces {

/**
 *A container for entities, which is needed for explicit grouping entities in order in which they will be sent to render.
 *All morph entities must lay on the same layer.
 */
class BNB_EXPORT layer {
public:
    virtual ~layer() {}

    /**
     *Fabric method for layer creating.
     *@return created layer (layer).
     */
    static std::shared_ptr<layer> create(const std::string & name);

    /**
     *set layer name
     *@param layer name (string)
     */
    virtual void set_name(const std::string & name) = 0;

    /**@return layer name (string) */
    virtual std::string get_name() const = 0;

    /**
     *Set enable/disable layer flag. The disabled layer will not be rendered.
     *@param active (bool) activity flag.
     */
    virtual void set_active(bool active) = 0;

    /**@return activity flag (bool) */
    virtual bool is_active() const = 0;

    /**
     *ability for enable/disable morphing in specified layer
     *@param enable (bool)
     */
    virtual void enable_morphing(bool enable) = 0;

    /**@return is morphing enable in the current layer */
    virtual bool is_morphing_enabled() const = 0;
};

} }  // namespace bnb::interfaces
/// @}

