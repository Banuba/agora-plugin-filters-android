/// \file
/// \addtogroup Scene
/// @{
///
// AUTOGENERATED FILE - DO NOT MODIFY!
// This file was generated by Djinni from scene.djinni

#pragma once

#include <bnb/utils/defs.hpp>
#include <cstdint>
#include <memory>
#include <optional>
#include <string>
#include <vector>

namespace bnb { namespace interfaces {

class layer;
class render_target;

/**
 *A list of render task. 
 *Every task consist of entites layer to draw, render target in which draw, and optional
 *list of sub geomteries names. Cannot be changed after effect activation.
 */
class BNB_EXPORT render_list {
public:
    virtual ~render_list() {}

    /**
     *Fabric method for render_list creating.
     *@return created render list (render_list).
     */
    static std::shared_ptr<render_list> create(const std::string & name);

    /**
     *Set name of the render list
     *@param name (string)
     */
    virtual void set_name(const std::string & name) = 0;

    /**@return name (string) of the render list */
    virtual std::string get_name() const = 0;

    virtual int64_t get_tasks_count() const = 0;

    /**
     *add render task to layer.
     *@param layer (layer): entities layer.
     *@param target (render_target): needed render target. Do not change if previous target was the same. (Target changing will trigger start/finish behavior.)
     *@param sub_geoms (optional<list<string>>): if specified: only sub geometries from this list will be rendered.
     */
    virtual int32_t add_task(const std::shared_ptr<layer> & layer, const std::shared_ptr<render_target> & target, const std::optional<std::vector<std::string>> & sub_geoms) = 0;

    /**
     *return render rask layer, by render task index. Throw if index >= tasks size.
     *@param task_index (int): render task index.
     *@return task layer (layer)
     */
    virtual std::shared_ptr<layer> get_task_layer(int32_t task_index) const = 0;

    /**
     *return render selected task sub geometries. If list is empty - all sub geometries will be rendered
     *@param task_index (int): render task index.
     *@return sub geometries list (list<string>): list of sub geometries to render
     */
    virtual std::vector<std::string> get_task_sub_geometries(int32_t task_index) const = 0;

    /**
     *return render rask render target, by render task index. Throw if index >= tasks size.
     *@param task_index (int): render task index.
     *@return task render target (render_target)
     */
    virtual std::shared_ptr<render_target> get_task_target(int32_t task_index) const = 0;

    /**Remove all render tasks. */
    virtual void clear() = 0;
};

} }  // namespace bnb::interfaces
/// @}

