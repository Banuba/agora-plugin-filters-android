/// \file
/// \addtogroup Scene
/// @{
///
// AUTOGENERATED FILE - DO NOT MODIFY!
// This file was generated by Djinni from scene.djinni

#pragma once

#include <bnb/utils/defs.hpp>
#include <memory>

namespace bnb { namespace interfaces {

class camera_composer;
class image;
class neuro_beautification_processed_texture;
enum class procedural_algorithm_type;

/**
 * Class, which represent some predefined processing algorithm for some image.
 * May or may NOT take some image as input (depends on algorithm). Result image is procedural texture itself.
 * Image processing occurs before any render list task executing.
 * Subclass of image.
 */
class BNB_EXPORT procedural_texture {
public:
    virtual ~procedural_texture() {}

    virtual procedural_algorithm_type get_algorithm_type() = 0;

    virtual void set_src_image(const std::shared_ptr<image> & src) = 0;

    virtual std::shared_ptr<image> get_src_image() const = 0;

    /**@return upcast to base type */
    virtual std::shared_ptr<image> as_image() = 0;

    virtual std::shared_ptr<neuro_beautification_processed_texture> as_neuro_beautification_processed_texture() = 0;

    virtual std::shared_ptr<camera_composer> as_camera_composer() = 0;
};

} }  // namespace bnb::interfaces
/// @}

