/// \file
/// \addtogroup Recognizer
/// @{
///
// AUTOGENERATED FILE - DO NOT MODIFY!
// This file was generated by Djinni from recognizer.djinni

#pragma once

#include "bnb/types/interfaces/frame_data.hpp"
#include <bnb/utils/defs.hpp>
#include <cstdint>
#include <memory>
#include <unordered_set>

namespace bnb { namespace interfaces {

class feature;
enum class feature_id;
enum class recognizer_mode;

class BNB_EXPORT recognizer {
public:
    virtual ~recognizer() {}

    static std::shared_ptr<recognizer> create(recognizer_mode mode);

    static int64_t get_feature_id(feature_id feature);

    virtual std::shared_ptr<feature> get_feature(feature_id feature) = 0;

    virtual void set_features(const std::unordered_set<feature_id> & features) = 0;

    virtual void add_feature(const std::shared_ptr<feature> & feature, const std::unordered_set<feature_id> & dependencies) = 0;

    virtual void remove_feature(const std::shared_ptr<feature> & feature) = 0;

    /** sets maximum allowed face results, if face tracking feature is present */
    virtual void set_max_faces(int32_t num) = 0;

    virtual void set_offline_mode(bool on) = 0;

    /**
     * Set future frame filtrarion mode.
     * Produce smoother recognition result (anti jitter), however adds inconsistency in push'ed/pop'ed frames (one frame lag)
     * Applied only in push_camera_frame/pop_frame_data methods, when offline mode is disabled.
     * Example: push frame 1 - pop frame 1, push frame 2 - pop frame 1, push frame 3 - pop frame 2, ...
     */
    virtual void set_use_future_filter(bool on) = 0;

    virtual void process(const std::shared_ptr<::bnb::interfaces::frame_data> & frame_data) = 0;

    virtual void push_camera_frame(const std::shared_ptr<::bnb::interfaces::frame_data> & input_frame_data) = 0;

    virtual bool pop_frame_data(const std::shared_ptr<::bnb::interfaces::frame_data> & output_frame_data) = 0;

    /** start the recognizer */
    virtual void start() = 0;

    /** pause the recognizer */
    virtual void pause() = 0;

    /** pause + clear */
    virtual void stop() = 0;

    /** clear input and output buffers and pipeline state, also clean cached features */
    virtual void clear() = 0;
};

} }  // namespace bnb::interfaces
/// @}

