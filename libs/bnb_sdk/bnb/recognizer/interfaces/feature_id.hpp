/// \file
/// \addtogroup Recognizer
/// @{
///
// AUTOGENERATED FILE - DO NOT MODIFY!
// This file was generated by Djinni from recognizer.djinni

#pragma once

#include <functional>

namespace bnb { namespace interfaces {

enum class feature_id : int {
    frx,
    pulse,
    action_units,
    background,
    hair,
    eyes,
    brows,
    skin,
    face,
    face_skin,
    lips,
    lips_shine,
    occlussion,
    glasses,
    acne,
    hand_skelet,
    eye_bags,
    face_acne,
    ruler,
    hair_strand,
    ring,
    neck,
    /**
     * This feature will prepare blurred texture to apply on
     * input image resulting a smoothed skin. 
     */
    skin_smoothing,
    /** Body segmentation. I.e. bodies detection on the frame. */
    body,
    /** Draw NN-generated smile on user face */
    creepy_smile,
    /** Nails segmentation and recoloring  */
    nails,
    /** Neuro beauty preprocessing */
    beauty_preproc,
    /** Combined face acne and eyebags removal */
    acne_eyebags,
    /** Combined face acne and eyebags removal, plus skin smoothing */
    acne_eyebags_skin_smoothing,
    hand_gestures,
    /** Hair recoloring in blonde */
    hair_recolor,
    textured_nails,
    /** Activates eyes corrector */
    eyes_correction,
    /** Activates lips corrector */
    lips_correction,
    /** Activates brows corrector */
    brows_correction,
    /** Activates face mesh corrector */
    face_mesh_correction,
    /** Activates brows mesh corrector */
    brows_mesh_correction,
    /** Computes coefficient for light correction */
    light_correction,
};

} }  // namespace bnb::interfaces

namespace std {

template <>
struct hash<::bnb::interfaces::feature_id> {
    size_t operator()(::bnb::interfaces::feature_id type) const {
        return std::hash<int>()(static_cast<int>(type));
    }
};

}  // namespace std
/// @}

