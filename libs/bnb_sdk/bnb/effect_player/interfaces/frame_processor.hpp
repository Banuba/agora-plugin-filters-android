/// \file
/// \addtogroup EffectPlayer
/// @{
///
// AUTOGENERATED FILE - DO NOT MODIFY!
// This file was generated by Djinni from effect_player.djinni

#pragma once

#include "bnb/types/interfaces/frame_data.hpp"
#include <bnb/utils/defs.hpp>
#include <memory>

namespace bnb { namespace interfaces {

class processor_configuration;
enum class processor_type;
enum class realtime_processor_mode;
struct processor_result;

class BNB_EXPORT frame_processor {
public:
    virtual ~frame_processor() {}

    /** Realtime feed processor. See RealtimeProcessorMode for more info. */
    static std::shared_ptr<frame_processor> create_realtime_processor(realtime_processor_mode mode, const std::shared_ptr<processor_configuration> & config);

    /**
     * Photo processor. `push` to set photo, processing happens on `pop` synchronously.
     * Several `pop` calls return same result without unnecessary processing,
     * except case when recognizer pipeline was changed by EffectPlayer, processing will be restarted.
     */
    static std::shared_ptr<frame_processor> create_photo_processor(const std::shared_ptr<processor_configuration> & config);

    /** Video processor. Consistent `push` - `pop` will process frames synchronously. */
    static std::shared_ptr<frame_processor> create_video_processor(const std::shared_ptr<processor_configuration> & config);

    virtual processor_type get_type() = 0;

    virtual void push(const std::shared_ptr<::bnb::interfaces::frame_data> & fd) = 0;

    virtual processor_result pop() = 0;
};

} }  // namespace bnb::interfaces
/// @}

