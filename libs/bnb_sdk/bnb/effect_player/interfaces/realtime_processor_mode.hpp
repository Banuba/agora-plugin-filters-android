/// \file
/// \addtogroup EffectPlayer
/// @{
///
// AUTOGENERATED FILE - DO NOT MODIFY!
// This file was generated by Djinni from effect_player.djinni

#pragma once

#include <functional>

namespace bnb { namespace interfaces {

enum class realtime_processor_mode : int {
    /** Synchronous mode. Frame drop not allowed, `pop` will block on processing. */
    sync,
    /**
     * Synchronous mode when effect loaded. Frame drop not allowed.
     * During effect loading `push` will forward frames to `pop`, `pop` will return SKIP.
     * When effect loaded, `pop` will block on processing.
     */
    sync_when_effect_loaded,
    /**
     * Asynchronous mode. Frame drop is allowed. `push` and `pop` do not block on processing.
     * `push` can drop frames, if processor busy,
     * `pop` can return EMPTY, if no processed frame data for now.
     */
    async,
    /**
     * Asynchronous mode. Frame drop is allowed. `push` and `pop` do not block on processing.
     * During effect loading `push` will forward frames to `pop`, `pop` will return SKIP.
     * When effect loaded, `push` can drop frames, if processor busy,
     * `pop` can return EMPTY, if no processed frame data for now.
     */
    async_when_effect_loaded,
};

} }  // namespace bnb::interfaces

namespace std {

template <>
struct hash<::bnb::interfaces::realtime_processor_mode> {
    size_t operator()(::bnb::interfaces::realtime_processor_mode type) const {
        return std::hash<int>()(static_cast<int>(type));
    }
};

}  // namespace std
/// @}

