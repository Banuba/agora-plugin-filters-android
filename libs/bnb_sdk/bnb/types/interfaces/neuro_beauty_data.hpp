/// \file
/// \addtogroup Types
/// @{
///
// AUTOGENERATED FILE - DO NOT MODIFY!
// This file was generated by Djinni from types.djinni

#pragma once

#include "bnb/types/interfaces/pixel_rect.hpp"
#include "bnb/types/interfaces/transformed_mask_byte.hpp"
#include "bnb/types/interfaces/transformed_mask_float.hpp"
#include <utility>
#include <vector>

namespace bnb { namespace interfaces {

struct neuro_beauty_data final {
    pixel_rect texture_roi;
    pixel_rect eyes_roi;
    pixel_rect brows_roi;
    pixel_rect lips_roi;
    std::vector<float> target_lats;
    transformed_mask_byte target_filtered;
    transformed_mask_float skin_segmentation_mask;
    transformed_mask_float face_mask_B;
    transformed_mask_float face_mask_smooth;
    transformed_mask_float lips_mask;
    std::vector<float> target_final_mesh;
    std::vector<float> lashes_mesh;
    float face_brightness;

    neuro_beauty_data(pixel_rect texture_roi_,
                      pixel_rect eyes_roi_,
                      pixel_rect brows_roi_,
                      pixel_rect lips_roi_,
                      std::vector<float> target_lats_,
                      transformed_mask_byte target_filtered_,
                      transformed_mask_float skin_segmentation_mask_,
                      transformed_mask_float face_mask_B_,
                      transformed_mask_float face_mask_smooth_,
                      transformed_mask_float lips_mask_,
                      std::vector<float> target_final_mesh_,
                      std::vector<float> lashes_mesh_,
                      float face_brightness_)
    : texture_roi(std::move(texture_roi_))
    , eyes_roi(std::move(eyes_roi_))
    , brows_roi(std::move(brows_roi_))
    , lips_roi(std::move(lips_roi_))
    , target_lats(std::move(target_lats_))
    , target_filtered(std::move(target_filtered_))
    , skin_segmentation_mask(std::move(skin_segmentation_mask_))
    , face_mask_B(std::move(face_mask_B_))
    , face_mask_smooth(std::move(face_mask_smooth_))
    , lips_mask(std::move(lips_mask_))
    , target_final_mesh(std::move(target_final_mesh_))
    , lashes_mesh(std::move(lashes_mesh_))
    , face_brightness(std::move(face_brightness_))
    {}
};

} }  // namespace bnb::interfaces
/// @}

