/// \file
/// \addtogroup Types
/// @{
///
// AUTOGENERATED FILE - DO NOT MODIFY!
// This file was generated by Djinni from types.djinni

#pragma once

#include <bnb/utils/defs.hpp>
#include <memory>
#include <vector>

namespace bnb { namespace interfaces {

struct camera_position;
struct pixel_rect;

class BNB_EXPORT face_data {
public:
    virtual ~face_data() {}

    static std::shared_ptr<face_data> create();

    virtual std::vector<float> get_landmarks() const = 0;

    virtual void set_landmarks(const std::vector<float> & lms) = 0;

    virtual std::vector<float> get_latents() const = 0;

    virtual void set_latents(const std::vector<float> & lats) = 0;

    virtual std::vector<float> get_vertices() const = 0;

    virtual void set_vertices(const std::vector<float> & verts) = 0;

    virtual camera_position get_camera_position() const = 0;

    virtual void set_camera_position(const camera_position & cam) = 0;

    virtual bool has_face() = 0;

    virtual pixel_rect get_face_rect() = 0;

    virtual void set_face_rect(const pixel_rect & rect) = 0;
};

} }  // namespace bnb::interfaces
/// @}

