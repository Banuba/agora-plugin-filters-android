/// \file
/// \addtogroup Scene
/// @{
///
// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from scene.djinni

#pragma once

#include <bnb/utils/defs.hpp>
#include <cstdint>
#include <memory>
#include <string>
#include <vector>

namespace bnb { namespace interfaces {

class material;
class mesh;
class parameter;
enum class animation_mode;

class BNB_EXPORT mesh_instance {
public:
    virtual ~mesh_instance() {}

    virtual void set_visible(bool visible) = 0;

    virtual bool is_visible() const = 0;

    virtual void set_material(const std::shared_ptr<material> & material) = 0;

    virtual std::shared_ptr<material> get_material() = 0;

    virtual void set_mesh(const std::shared_ptr<mesh> & mesh, int32_t geometry_index) = 0;

    virtual std::shared_ptr<mesh> get_mesh() = 0;

    virtual int32_t get_geometry_index() = 0;

    virtual void animation_change(const std::string & animation, animation_mode mode) = 0;

    virtual void animation_play() = 0;

    virtual void animation_pause() = 0;

    virtual void animation_seek(int64_t position_ns) = 0;

    virtual bool is_animation_playing() const = 0;

    virtual std::string get_animation() const = 0;

    virtual animation_mode get_animation_mode() const = 0;

    virtual int64_t get_animation_position_ns() const = 0;

    virtual int64_t get_animation_duration_ns() const = 0;

    virtual int64_t get_animation_time_offset_ns() const = 0;

    virtual void set_animation_time_offset_ns(int64_t time_ns) = 0;

    virtual void add_parameter(const std::shared_ptr<parameter> & parameter) = 0;

    virtual std::vector<std::shared_ptr<parameter>> get_parameters() const = 0;

    virtual void remove_parameter(const std::shared_ptr<parameter> & parameter) = 0;
};

} }  // namespace bnb::interfaces
/// @}

