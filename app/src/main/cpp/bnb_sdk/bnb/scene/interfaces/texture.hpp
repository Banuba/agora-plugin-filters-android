/// \file
/// \addtogroup Scene
/// @{
///
// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from scene.djinni

#pragma once

#include <bnb/utils/defs.hpp>
#include <cstdint>
#include <string>

namespace bnb { namespace interfaces {

enum class texture_filtering_mode;

class BNB_EXPORT texture {
public:
    virtual ~texture() {}

    /** Load texture from specified file */
    virtual void load(const std::string & file_name) = 0;

    virtual void load_ktx(const std::string & file_name) = 0;

    /** Get width of loaded image */
    virtual int32_t get_width() const = 0;

    /** Get height of loaded image */
    virtual int32_t get_height() const = 0;

    /** Get number of images in mipmap chain */
    virtual int32_t get_levels() const = 0;

    virtual int32_t get_layers() const = 0;

    /** Enable/disable mipmaps generation (on by default) */
    virtual void set_mips(bool enable) = 0;

    /** Get current mipmaps generation setting */
    virtual bool has_mips() const = 0;

    /** Enable/disable texture tiling */
    virtual void set_tiling(bool enable) = 0;

    /** Get current tiling setting */
    virtual bool get_tiling() const = 0;

    /** Set texture filtering mode (linear by default) */
    virtual void set_filtering(texture_filtering_mode type) = 0;

    /** Get current filtering mode */
    virtual texture_filtering_mode get_filtering_mode() const = 0;

    /** Set vertical flip on load */
    virtual void set_vflip(bool enable) = 0;

    /** Get vertical flip setting */
    virtual bool is_vflipped() const = 0;
};

} }  // namespace bnb::interfaces
/// @}

