/// \file
/// \addtogroup Types
/// @{
///
// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from types.djinni

#pragma once

#include <cstdint>
#include <utility>
#include <vector>

namespace bnb { namespace interfaces {

struct camera_position final {
    int32_t hasCameraPosition;
    float frustum_l;
    float frustum_r;
    float frustum_t;
    float frustum_b;
    float frustum_n;
    float frustum_f;
    float model_r_x;
    float model_r_y;
    float model_r_z;
    float model_t_x;
    float model_t_y;
    float model_t_z;
    float head_center_x;
    float head_center_y;
    std::vector<float> model_view_m;
    std::vector<float> projection_m;

    camera_position(int32_t hasCameraPosition_,
                    float frustum_l_,
                    float frustum_r_,
                    float frustum_t_,
                    float frustum_b_,
                    float frustum_n_,
                    float frustum_f_,
                    float model_r_x_,
                    float model_r_y_,
                    float model_r_z_,
                    float model_t_x_,
                    float model_t_y_,
                    float model_t_z_,
                    float head_center_x_,
                    float head_center_y_,
                    std::vector<float> model_view_m_,
                    std::vector<float> projection_m_)
    : hasCameraPosition(std::move(hasCameraPosition_))
    , frustum_l(std::move(frustum_l_))
    , frustum_r(std::move(frustum_r_))
    , frustum_t(std::move(frustum_t_))
    , frustum_b(std::move(frustum_b_))
    , frustum_n(std::move(frustum_n_))
    , frustum_f(std::move(frustum_f_))
    , model_r_x(std::move(model_r_x_))
    , model_r_y(std::move(model_r_y_))
    , model_r_z(std::move(model_r_z_))
    , model_t_x(std::move(model_t_x_))
    , model_t_y(std::move(model_t_y_))
    , model_t_z(std::move(model_t_z_))
    , head_center_x(std::move(head_center_x_))
    , head_center_y(std::move(head_center_y_))
    , model_view_m(std::move(model_view_m_))
    , projection_m(std::move(projection_m_))
    {}
};

} }  // namespace bnb::interfaces
/// @}

