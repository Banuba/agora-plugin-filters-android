/// \file
/// \addtogroup Types
/// @{
///
// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from types.djinni

#pragma once

#include "bnb/types/interfaces/pixel_rect.hpp"
#include <utility>
#include <vector>

namespace bnb { namespace interfaces {

struct transformable_event final {
    /** (common -> some event data basis) transformation */
    std::vector<float> basis_transform;
    /** rectangle area in common basis that encloses all valid & usable data */
    pixel_rect full_roi;

    transformable_event(std::vector<float> basis_transform_,
                        pixel_rect full_roi_)
    : basis_transform(std::move(basis_transform_))
    , full_roi(std::move(full_roi_))
    {}
};

} }  // namespace bnb::interfaces
/// @}

