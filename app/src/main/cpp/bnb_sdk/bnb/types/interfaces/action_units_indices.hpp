/// \file
/// \addtogroup Types
/// @{
///
// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from types.djinni

#pragma once

#include <functional>

namespace bnb { namespace interfaces {

enum class action_units_indices : int {
    /**0 */
    BrowDownLeft,
    BrowDownRight,
    BrowInnerUp,
    BrowOuterUpLeft,
    BrowOuterUpRight,
    CheekPuff,
    CheekSquintLeft,
    CheekSquintRight,
    JawForward,
    /**9 */
    JawLeft,
    JawRight,
    JawOpen,
    MouthClose,
    MouthFunnel,
    MouthPucker,
    MouthLeft,
    MouthRight,
    MouthSmileLeft,
    MouthSmileRight,
    /**19 */
    MouthDimpleLeft,
    MouthDimpleRight,
    MouthRollUpper,
    MouthShrugUpper,
    MouthShrugLower,
    MouthRollLower,
    MouthFrownLeft,
    MouthFrownRight,
    MouthUpperUpLeft,
    MouthUpperUpRight,
    /**29 */
    MouthLowerDownLeft,
    MouthLowerDownRight,
    NoseSneerLeft,
    NoseSneerRight,
    MouthPressLeft,
    MouthPressRight,
    MouthStretchLeft,
    MouthStretchRight,
    EyeBlinkLeft,
    EyeBlinkRight,
    /**39 */
    EyeWideLeft,
    EyeWideRight,
    EyeSquintLeft,
    EyeSquintRight,
    EyeLookDownLeft,
    EyeLookInLeft,
    EyeLookOutLeft,
    EyeLookUpLeft,
    EyeLookDownRight,
    EyeLookInRight,
    EyeLookOutRight,
    /**50 */
    EyeLookUpRight,
    /**51 */
    total_au_count,
};

} }  // namespace bnb::interfaces

namespace std {

template <>
struct hash<::bnb::interfaces::action_units_indices> {
    size_t operator()(::bnb::interfaces::action_units_indices type) const {
        return std::hash<int>()(static_cast<int>(type));
    }
};

}  // namespace std
/// @}

